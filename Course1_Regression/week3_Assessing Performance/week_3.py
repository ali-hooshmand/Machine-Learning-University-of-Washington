# coding=utf-8# TASKS:================================================================================================================# Regression Week 3:# In this notebook you will compare different regression models in order to assess which model fits best. We will be# using polynomial regression as a means to examine this topic. In particular you will:# 1- Write a function to take an an array and a degree and return an data frame where each column is the array#    to a polynomial value up to the total degree.# 2- Use a plotting tool (e.g. matplotlib) to visualize polynomial regressions# 3- Use a plotting tool (e.g. matplotlib) to visualize the same polynomial degree on different subsets of the data# 4- Use a validation set to select a polynomial degree# 5- Assess the final fit using test data# ======================================================================================================================# coding=utf-8import pandasimport numpy as npimport timeimport mathfrom sklearn import linear_modelfrom pandas.io.packers import dtype_dictstart = time.time()# 1 & 2. load in the house data#sales = pandas.read_csv('./kc_house_data.csv')#sales_train = pandas.read_csv('./kc_house_train_data.csv')#sales_test = pandas.read_csv('./kc_house_test_data.csv')# ======================================================================================================================# 2. Write your own function called ‘polynomial_sframe’ (or otherwise) which accepts an array ‘feature’ and a maximal# ‘degree’ and returns an data frame (e.g. SFrame) with the first column equal to ‘feature’ and the remaining columns# equal to ‘feature’ to increasing integer powers up to ‘degree’.def polynomial_dataframe(feature, degree):  # feature is pandas.Series type    # assume that degree >= 1    # initialize the dataframe:    poly_dataframe = pandas.DataFrame(dtype='double')    # and set poly_dataframe['power_1'] equal to the passed feature    poly_dataframe['power_1'] = feature    for i in range(2, degree+1):        col_name = 'power_'+str(i)        poly_dataframe[col_name] = feature**i        # for j in range(0, len(feature)):        #    feature[j] = np.power(feature[j],i)        # poly_dataframe[col_name] = feature    return poly_dataframe# ======================================================================================================================# 3. For the remainder of the assignment we will be working with the house Sales data as in the previous notebooks.# Load in the data and also sort the sales SFrame by ‘sqft_living’.# When we plot the fitted values we want to join them up in a line and this works best if the variable on the X-axis# (which will be ‘sqft_living’) is sorted. For houses with identical square footage, we break the tie by their prices.sales = pandas.read_csv('kc_house_data.csv')sales = sales.sort_values(['sqft_living', 'price'])# ======================================================================================================================# 4. Make a 1 degree polynomial SFrame with sales[‘sqft_living’] as the the feature. Call it ‘poly1_data’.poly1_data = polynomial_dataframe(np.asanyarray(sales['sqft_living']), 1)# ======================================================================================================================# 5. Add sales[‘price’] to poly1_data as this will be our output variable. e.g. if you’re using SFramespoly1_data['price'] = np.asanyarray(sales['price'])# ======================================================================================================================# 6. Use linear_regression.create (or another linear regression library) to compute the regression weights for# predicting sales[‘price’] based on the 1 degree polynomial feature ‘sqft_living’. The result should be an intercept# and slope. e.g if you’re using graphlab create:# 1- Create linear regression objectregr = linear_model.LinearRegression()# 2- Train the modelregr.fit(np.asanyarray(poly1_data['power_1']).reshape(len(poly1_data['power_1']), 1), np.asanyarray(poly1_data['price']))# 3- The coefficientsprint 'Coefficients: 'print regr.coef_[0]print regr.intercept_# ======================================================================================================================# 7. Next use the produce a scatter plot of the training data (just square feet vs price) and add the fitted model:import matplotlib.pyplot as plt# matplotlib inline#plt.plot(poly1_data['power_1'], poly1_data['price'],'.', poly1_data['power_1'], regr.predict(np.asanyarray(poly1_data['power_1']).reshape(len(poly1_data['power_1']), 1)),'-')#plt.show(block=True)# ======================================================================================================================# 8. Now that you have plotted the results using a 1st degree polynomial, try it again using a 2nd degree and 3rd degree#  polynomial. Look at the fitted lines, do they appear as you would expect?poly2_data = polynomial_dataframe(np.asanyarray(sales['sqft_living']), 2)poly2_data['price'] = np.asanyarray(sales['price'])regr2 = linear_model.LinearRegression()regr2.fit(poly2_data.as_matrix(['power_1', 'power_2']).reshape(len(poly2_data['power_1']), 2), np.asanyarray(poly2_data['price']))print 'Coefficients: 'print regr2.coef_[0]print regr2.coef_[1]print regr2.intercept_poly3_data = polynomial_dataframe(np.asanyarray(sales['sqft_living']), 3)poly3_data['price'] = np.asanyarray(sales['price'])regr3 = linear_model.LinearRegression()regr3.fit(poly3_data.as_matrix(['power_1', 'power_2', 'power_3']).reshape(len(poly3_data['power_1']), 3), np.asanyarray(poly3_data['price']))print 'Coefficients: 'print regr2.coef_[0]print regr2.coef_[1]print regr3.coef_[2]print regr3.intercept_plt.plot(poly1_data['power_1'], poly1_data['price'],'.',         poly1_data['power_1'], regr.predict(np.asanyarray(poly1_data['power_1']).reshape(len(poly1_data['power_1']), 1)),'-',         poly1_data['power_1'], regr2.predict(poly2_data.as_matrix(['power_1', 'power_2'])).reshape(len(poly2_data['power_1']), 1),'-',         poly1_data['power_1'], regr3.predict(poly3_data.as_matrix(['power_1', 'power_2', 'power_3'])).reshape(len(poly3_data['power_1']), 1),'-')plt.show(block=True)# ======================================================================================================================# 9. Now try a 15th degree polynomial. Print out the coefficients and look at the resulted fitted line.# Do you think this degree is appropriate for these data? If we were to use a different subset of the data do you think# we would get pretty much the same curve?poly15_data = polynomial_dataframe(np.asanyarray(sales['sqft_living'], dtype=object), 15)poly15_data['price'] = np.asanyarray(sales['price'], dtype=object)regr15 = linear_model.LinearRegression()regr15.fit(poly15_data.as_matrix(['power_1', 'power_2', 'power_3', 'power_4', 'power_5', 'power_6', 'power_7', 'power_8', 'power_9', 'power_10', 'power_11', 'power_12', 'power_13', 'power_14', 'power_15']).reshape(len(poly15_data['power_1']), 15), np.asanyarray(poly15_data['price']))plt.plot(poly15_data['power_1'], poly15_data['price'],'.',         poly15_data['power_1'], regr15.predict(poly15_data.as_matrix(['power_1', 'power_2', 'power_3', 'power_4', 'power_5', 'power_6', 'power_7', 'power_8', 'power_9', 'power_10', 'power_11', 'power_12', 'power_13', 'power_14', 'power_15'])).reshape(len(poly15_data['power_1']), 1),'-')plt.show(block=True)# ======================================================================================================================# 10 & 11. Estimate a 15th degree polynomial on all 4 sets, plot the results and view the coefficients for all# four models (set_1, set_2, set_3, and set_4).sales_set1 = pandas.read_csv('wk3_kc_house_set_1_data.csv')sales_set1 = sales_set1.sort_values(['sqft_living', 'price'])poly15_data = polynomial_dataframe(np.asanyarray(sales_set1['sqft_living'], dtype=object), 15)poly15_data['price'] = np.asanyarray(sales_set1['price'], dtype=object)regr15.fit(poly15_data.as_matrix(['power_1', 'power_2', 'power_3', 'power_4', 'power_5', 'power_6', 'power_7', 'power_8', 'power_9', 'power_10', 'power_11', 'power_12', 'power_13', 'power_14', 'power_15']).reshape(len(poly15_data['power_1']), 15), np.asanyarray(poly15_data['price']))print 'power_15 coef for set_1 data is ' + str(regr15.coef_[14])plt.plot(poly15_data['power_1'], poly15_data['price'],'.',         poly15_data['power_1'], regr15.predict(poly15_data.as_matrix(['power_1', 'power_2', 'power_3', 'power_4', 'power_5', 'power_6', 'power_7', 'power_8', 'power_9', 'power_10', 'power_11', 'power_12', 'power_13', 'power_14', 'power_15'])).reshape(len(poly15_data['power_1']), 1),'-')plt.show(block=True)sales_set2 = pandas.read_csv('wk3_kc_house_set_2_data.csv')sales_set2 = sales_set2.sort_values(['sqft_living', 'price'])poly15_data = polynomial_dataframe(np.asanyarray(sales_set2['sqft_living'], dtype=object), 15)poly15_data['price'] = np.asanyarray(sales_set2['price'], dtype=object)regr15.fit(poly15_data.as_matrix(['power_1', 'power_2', 'power_3', 'power_4', 'power_5', 'power_6', 'power_7', 'power_8', 'power_9', 'power_10', 'power_11', 'power_12', 'power_13', 'power_14', 'power_15']).reshape(len(poly15_data['power_1']), 15), np.asanyarray(poly15_data['price']))print 'power_15 coef for set_2 data is ' + str(regr15.coef_[14])plt.plot(poly15_data['power_1'], poly15_data['price'],'.',         poly15_data['power_1'], regr15.predict(poly15_data.as_matrix(['power_1', 'power_2', 'power_3', 'power_4', 'power_5', 'power_6', 'power_7', 'power_8', 'power_9', 'power_10', 'power_11', 'power_12', 'power_13', 'power_14', 'power_15'])).reshape(len(poly15_data['power_1']), 1),'-')plt.show(block=True)sales_set3 = pandas.read_csv('wk3_kc_house_set_3_data.csv')sales_set3 = sales_set3.sort_values(['sqft_living', 'price'])poly15_data = polynomial_dataframe(np.asanyarray(sales_set3['sqft_living'], dtype=object), 15)poly15_data['price'] = np.asanyarray(sales_set3['price'], dtype=object)regr15.fit(poly15_data.as_matrix(['power_1', 'power_2', 'power_3', 'power_4', 'power_5', 'power_6', 'power_7', 'power_8', 'power_9', 'power_10', 'power_11', 'power_12', 'power_13', 'power_14', 'power_15']).reshape(len(poly15_data['power_1']), 15), np.asanyarray(poly15_data['price']))print 'power_15 coef for set_3 data is ' + str(regr15.coef_[14])plt.plot(poly15_data['power_1'], poly15_data['price'],'.',         poly15_data['power_1'], regr15.predict(poly15_data.as_matrix(['power_1', 'power_2', 'power_3', 'power_4', 'power_5', 'power_6', 'power_7', 'power_8', 'power_9', 'power_10', 'power_11', 'power_12', 'power_13', 'power_14', 'power_15'])).reshape(len(poly15_data['power_1']), 1),'-')plt.show(block=True)sales_set4 = pandas.read_csv('wk3_kc_house_set_4_data.csv')sales_set4 = sales_set4.sort_values(['sqft_living', 'price'])poly15_data = polynomial_dataframe(np.asanyarray(sales_set4['sqft_living'], dtype=object), 15)poly15_data['price'] = np.asanyarray(sales_set4['price'], dtype=object)regr15.fit(poly15_data.as_matrix(['power_1', 'power_2', 'power_3', 'power_4', 'power_5', 'power_6', 'power_7', 'power_8', 'power_9', 'power_10', 'power_11', 'power_12', 'power_13', 'power_14', 'power_15']).reshape(len(poly15_data['power_1']), 15), np.asanyarray(poly15_data['price']))print 'power_15 coef for set_4 data is ' + str(regr15.coef_[14])plt.plot(poly15_data['power_1'], poly15_data['price'],'.',         poly15_data['power_1'], regr15.predict(poly15_data.as_matrix(['power_1', 'power_2', 'power_3', 'power_4', 'power_5', 'power_6', 'power_7', 'power_8', 'power_9', 'power_10', 'power_11', 'power_12', 'power_13', 'power_14', 'power_15'])).reshape(len(poly15_data['power_1']), 1),'-')plt.show(block=True)# ======================================================================================================================# 12. Quiz Question: Is the sign (positive or negative) for power_15 the same in all four models?# Answer: No# ======================================================================================================================# 13. Quiz Question: True/False the plotted fitted lines look the same in all four plots# Answer: False# ======================================================================================================================# 14. Since the “best” polynomial degree is unknown to us we will use cross validation to select the best degree.# Please download the provided csv files for training, validation and test data.sales_train = pandas.read_csv('wk3_kc_house_train_data.csv')sales_valid = pandas.read_csv('wk3_kc_house_valid_data.csv')sales_test = pandas.read_csv('wk3_kc_house_test_data.csv')# ======================================================================================================================# 15. Now for each degree from 1 to 15:RSS = [None] * 15for degree in range(1, 16):    # - Build a polynomial data set using training_data[‘sqft_living’] as the feature and the current degree    poly_data = polynomial_dataframe(np.asanyarray(sales_train['sqft_living'], dtype=object), degree)    # - Add training_data[‘price’] as a column to your polynomial data set    poly_data['price'] = np.asanyarray(sales_train['price'], dtype=object)    # - Learn a model on TRAINING data to predict ‘price’ based on your polynomial data set at the current degree    features_list = list(poly_data)    del features_list[-1]    regr.fit(poly_data.as_matrix(features_list).reshape(len(poly_data['power_1']), degree),             np.asanyarray(poly_data['price']))    # - Compute the RSS on VALIDATION for the current model (print or save the RSS)    poly_data_valid = polynomial_dataframe(np.asanyarray(sales_valid['sqft_living'], dtype=object), degree)    input_sqftLiving = poly_data_valid.as_matrix(features_list).reshape(len(poly_data_valid['power_1']), degree)    predicted_price = regr.predict(input_sqftLiving)    error = np.asanyarray(sales_valid['price']) - predicted_price    RSS[degree-1] = np.dot(error, error)# ======================================================================================================================# 16. Quiz Question: Which degree (1, 2, …, 15) had the lowest RSS on Validation data?print 'The best model degree with lowest RSS (' + str(min(RSS)) + ') is ' + str(1+RSS.index(min(RSS)))# Answer : best degree is 6# ======================================================================================================================# 17. Now that you have selected a degree compute the RSS on TEST data for the model with the best degree from the# Validation data.poly_data = polynomial_dataframe(np.asanyarray(sales_train['sqft_living'], dtype=object), 6)poly_data['price'] = np.asanyarray(sales_train['price'], dtype=object)features_list = list(poly_data)del features_list[-1]regr.fit(poly_data.as_matrix(features_list).reshape(len(poly_data['power_1']), 6),         np.asanyarray(poly_data['price']))poly_data_test = polynomial_dataframe(np.asanyarray(sales_test['sqft_living'], dtype=object), 6)input_sqftLiving = poly_data_test.as_matrix(features_list).reshape(len(poly_data_test['power_1']), 6)predicted_price = regr.predict(input_sqftLiving)error = np.asanyarray(sales_test['price']) - predicted_priceprint 'RSS for test data set is ' + str(np.dot(error, error))# ======================================================================================================================# 18. Quiz Question: what is the RSS on TEST data for the model with the degree selected from Validation data?# Answer: RSS for test set is 1.35e+14end = time.time()print('Time of Process was: ' + str(end - start) + '[sec]')