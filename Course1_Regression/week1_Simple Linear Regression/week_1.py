# coding=utf-8import pandas# from sklearn.model_selection import train_test_splitfrom sklearn.feature_extraction.text import CountVectorizerfrom sklearn import linear_modelimport numpy as npimport timestart = time.time()# 1 & 2. load in the house datasales_train = pandas.read_csv('./kc_house_train_data.csv')sales_test = pandas.read_csv('./kc_house_test_data.csv')# ======================================================================================================================#3. Write a generic function that accepts a column of data ‘input_feature’ and another column ‘output’#    and returns the Simple Linear Regression parameters ‘intercept’ and ‘slope’. Use the closed form solution from#    lecture to calculate the slope and intercept. e.g. in pythondef simple_linear_regression(input_feature, output):    N = len(output)    slope = (np.dot(input_feature, output) - sum(input_feature)*sum(output)/N) / (np.dot(input_feature, input_feature) - sum(input_feature)*sum(input_feature)/N)    intercept = sum(output)/N - slope * sum(input_feature)/N    return(intercept, slope)# ======================================================================================================================# 4. Use your function to calculate the estimated slope and intercept on the training data to predict ‘price’ given#    ‘sqft_living’:input_feature = sales_train['sqft_living']output = sales_train['price'][squarfeet_intercept, squarfeet_slope] = simple_linear_regression(input_feature, output)# ======================================================================================================================# 5. Write a function that accepts a column of data ‘input_feature’, the ‘slope’, and the ‘intercept’ you learned, and#    returns an a column of predictions ‘predicted_output’ for each entry in the input column:def get_regression_predictions(input_feature, intercept, slope):    predicted_output = intercept + slope * input_feature    return(predicted_output)# ======================================================================================================================# 6. Quiz Question: Using your Slope and Intercept, What is the predicted price for a house with 2650 sqft?predicted_price = get_regression_predictions(2650 , squarfeet_intercept, squarfeet_slope)print 'predicted price: $'+str(predicted_price)# ======================================================================================================================# 7. Write a function that accepts column of data: ‘input_feature’, and ‘output’ and the regression parameters ‘slope’#    and ‘intercept’ and outputs the Residual Sum of Squares (RSS)def RSS(input_feature, output, slope, intercept):    error = output - (intercept + slope * input_feature)    rss = np.dot(error, error)    return(rss)# ======================================================================================================================# 8. Quiz Question: According to this function and the slope and intercept What is the RSS for the simple#    linear regression using squarefeet to predict prices on TRAINING data?rss = RSS(sales_train['sqft_living'], sales_train['price'], squarfeet_slope, squarfeet_intercept)print rss# ======================================================================================================================# 9. Note that although we estimated the regression slope and intercept in order to predict the output from the input,#    since this is a simple linear relationship with only two variables we can invert the linear function to estimate#    the input given the output!def inverse_regression_predictions(output, intercept, slope):    estimated_input = (output - intercept)/slope    return(estimated_input)# ======================================================================================================================# 10. Quiz Question: According to this function and the regression slope and intercept from (3) what is the estimated#     square-feet for a house costing $800,000?estimated_input = inverse_regression_predictions(800000, squarfeet_intercept, squarfeet_slope)print 'estimated sqft for $800,000 price is: '+str(estimated_input)+' [sqft]'# ======================================================================================================================# 11. Instead of using ‘sqft_living’ to estimate prices we could use ‘bedrooms’ (a count of the number of bedrooms in#     the house) to estimate prices. Using your function from (3) calculate the Simple Linear Regression slope and#     intercept for estimating price based on bedrooms. Save this slope and intercept for later (you might want to call#     them e.g. bedroom_slope, bedroom_intercept).[bedroom_intercept, bedroom_slope] = simple_linear_regression(sales_train['bedrooms'], sales_train['price'])# ======================================================================================================================# 12. Now that we have 2 different models compute the RSS from BOTH models on TEST data.rss_sqft = RSS(sales_test['sqft_living'], sales_test['price'], squarfeet_slope, squarfeet_intercept)print 'RSS_sqft is: '+ str(rss_sqft)rss_bedroom = RSS(sales_test['bedrooms'], sales_test['price'], bedroom_slope, bedroom_intercept)print 'RSS_bedroom is: '+ str(rss_bedroom)# RSS_sqft is: 2.75e+14# RSS_bedroom is: 4.93e+14# ======================================================================================================================# 13. Quiz Question: Which model (square feet or bedrooms) has lowest RSS on TEST data?# Answer: sqft modelend = time.time()print('Time of Process was: ' + str(end - start) + '[sec]')