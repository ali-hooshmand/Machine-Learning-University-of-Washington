# coding=utf-8import pandasimport numpy as npimport timefrom sklearn import linear_modelstart = time.time()# 1 & 2. load in the house datasales_train = pandas.read_csv('./kc_house_train_data.csv')sales_test = pandas.read_csv('./kc_house_test_data.csv')# ======================================================================================================================# 3. Although we often think of multiple regression as including multiple different features (e.g. # of bedrooms,#    square feet, and # of bathrooms) but we can also consider transformations of existing variables e.g. the log of the#    square feet or even "interaction" variables such as the product of bedrooms and bathrooms. Add 4 new variables in#    both your train_data and test_data.sales_train['bedrooms_squared'] = sales_train['bedrooms'] * sales_train['bedrooms']sales_test['bedrooms_squared'] = sales_test['bedrooms'] * sales_test['bedrooms']sales_train['bed_bath_rooms'] = sales_train['bedrooms'] * sales_train['bathrooms']sales_test['bed_bath_rooms'] = sales_test['bedrooms'] * sales_test['bathrooms']sales_train['log_sqft_living'] = np.log10(sales_train['sqft_living'])sales_test['log_sqft_living'] = np.log10(sales_test['sqft_living'])sales_train['lat_plus_long'] = sales_train['lat'] * sales_train['long']sales_test['lat_plus_long'] = sales_test['lat'] * sales_test['long']# ======================================================================================================================# 4. Quiz Question: what are the mean (arithmetic average) values of your 4 new variables on TEST data?def mean(numbers):    return float(sum(numbers)) / max(len(numbers), 1)print mean(sales_test['bedrooms_squared'])print mean(sales_test['bed_bath_rooms'])print mean(sales_test['log_sqft_living'])print mean(sales_test['lat_plus_long'])# ======================================================================================================================# 5. Use graphlab.linear_regression.create (or any other regression library/function) to estimate the regression#    coefficients/weights for predicting ‘price’ for the following three models:(In all 3 models:# Model 1: ‘sqft_living’, ‘bedrooms’, ‘bathrooms’, ‘lat’, and ‘long’# Model 2: ‘sqft_living’, ‘bedrooms’, ‘bathrooms’, ‘lat’,‘long’, and ‘bed_bath_rooms’# Model 3: ‘sqft_living’, ‘bedrooms’, ‘bathrooms’, ‘lat’,‘long’, ‘bed_bath_rooms’, ‘bedrooms_squared’, ‘log_sqft_living’#           , and ‘lat_plus_long’reg_1 = linear_model.LinearRegression()reg_2 = linear_model.LinearRegression()reg_3 = linear_model.LinearRegression()x_train_model_1 = sales_train[['sqft_living', 'bedrooms', 'bathrooms', 'lat', 'long']].values.reshape(-1, 5)y_train_model_1 = sales_train['price']model_1 = reg_1.fit(x_train_model_1, y_train_model_1)x_train_model_2 = sales_train[['sqft_living', 'bedrooms', 'bathrooms', 'lat', 'long', 'bed_bath_rooms']].values.reshape(-1, 6)y_train_model_2 = sales_train['price']model_2 = reg_2.fit(x_train_model_2, y_train_model_2)x_train_model_3 = sales_train[['sqft_living', 'bedrooms', 'bathrooms', 'lat', 'long', 'bed_bath_rooms',                               'bedrooms_squared', 'log_sqft_living', 'lat_plus_long']].values.reshape(-1, 9)y_train_model_3 = sales_train['price']model_3 = reg_3.fit(x_train_model_3, y_train_model_3)#print model_2.coef_# ======================================================================================================================# 6. Quiz Question: What is the sign (positive or negative) for the coefficient/weight for ‘bathrooms’ in Model 1?print model_1.coef_# Answer: 1.57067421e+0# ======================================================================================================================# 7. Quiz Question: What is the sign (positive or negative) for the coefficient/weight for ‘bathrooms’ in Model 2?print model_2.coef_# Answer: -7.14613083e+04# ======================================================================================================================# 8. Is the sign for the coefficient the same in both models? Think about why this might be the case.# Answer: No# ======================================================================================================================# 9. Now using your three estimated models compute the RSS (Residual Sum of Squares) on the Training data.y_predict_1_on_train_data = model_1.predict(x_train_model_1)err_1_on_train_data = y_train_model_1 - y_predict_1_on_train_datarss_1_train = 0for i in range(0, len(err_1_on_train_data)):    rss_1_train = rss_1_train + err_1_on_train_data[i]*err_1_on_train_data[i]RSS_1_train = np.power(rss_1_train, 0.5)y_predict_2_on_train_data = model_2.predict(x_train_model_2)err_2_on_train_data = y_train_model_2 - y_predict_2_on_train_datarss_2_train = 0for i in range(0, len(err_2_on_train_data)):    rss_2_train = rss_2_train + err_2_on_train_data[i]*err_2_on_train_data[i]RSS_2_train = np.power(rss_2_train, 0.5)y_predict_3_on_train_data = model_3.predict(x_train_model_3)err_3_on_train_data = y_train_model_3 - y_predict_3_on_train_datarss_3_train = 0for i in range(0, len(err_3_on_train_data)):    rss_3_train = rss_3_train + err_3_on_train_data[i]*err_3_on_train_data[i]RSS_3_train = np.power(rss_3_train, 0.5)# ======================================================================================================================# 10. Quiz Question: Which model (1, 2 or 3) had the lowest RSS on TRAINING data?print RSS_1_train  # 31110769.2455print RSS_2_train  # 30958353.2358print RSS_3_train  # 29932040.9226# ======================================================================================================================# 11. Now using your three estimated models compute the RSS on the Testing datax_test_model_1 = sales_test[['sqft_living', 'bedrooms', 'bathrooms', 'lat', 'long']].values.reshape(-1, 5)y_test_model_1 = sales_test['price']x_test_model_2 = sales_test[['sqft_living', 'bedrooms', 'bathrooms', 'lat', 'long', 'bed_bath_rooms']].values.reshape(-1, 6)y_test_model_2 = sales_test['price']x_test_model_3 = sales_test[['sqft_living', 'bedrooms', 'bathrooms', 'lat', 'long', 'bed_bath_rooms',                               'bedrooms_squared', 'log_sqft_living', 'lat_plus_long']].values.reshape(-1, 9)y_test_model_3 = sales_test['price']y_predict_1_on_test_data = model_1.predict(x_test_model_1)err_1_on_test_data = y_test_model_1 - y_predict_1_on_test_datarss_1_test = 0for i in range(0, len(err_1_on_test_data)):    rss_1_test = rss_1_test + err_1_on_test_data[i]*err_1_on_test_data[i]RSS_1_test = np.power(rss_1_test, 0.5)y_predict_2_on_test_data = model_2.predict(x_test_model_2)err_2_on_test_data = y_test_model_2 - y_predict_2_on_test_datarss_2_test = 0for i in range(0, len(err_2_on_test_data)):    rss_2_test = rss_2_test + err_2_on_test_data[i]*err_2_on_test_data[i]RSS_2_test = np.power(rss_2_test, 0.5)y_predict_3_on_test_data = model_3.predict(x_test_model_3)err_3_on_test_data = y_test_model_3 - y_predict_3_on_test_datarss_3_test = 0for i in range(0, len(err_3_on_test_data)):    rss_3_test = rss_3_test + err_3_on_test_data[i]*err_3_on_test_data[i]RSS_3_test = np.power(rss_3_test, 0.5)# ======================================================================================================================# 12. Quiz Question: Which model (1, 2, or 3) had the lowest RSS on TESTING data?print RSS_1_test  # 15016673.0602print RSS_2_test  # 14945817.5747print RSS_3_test  # 16087412.205# ======================================================================================================================# 13. Did you get the same answer for 9 and 11? Think about why this might be the case.# Answer: No, because vof over fitting of model_3end = time.time()print('Time of Process was: ' + str(end - start) + '[sec]')